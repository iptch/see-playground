Subject: [PATCH] SEE-3: Implement hyperrectangle volume computation
---
Index: src/main/java/ch/ipt/see/playground/MathController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ch/ipt/see/playground/MathController.java b/src/main/java/ch/ipt/see/playground/MathController.java
new file mode 100644
--- /dev/null	(revision d91968b1dc5eaf34c705f5aab4064aa671673715)
+++ b/src/main/java/ch/ipt/see/playground/MathController.java	(revision d91968b1dc5eaf34c705f5aab4064aa671673715)
@@ -0,0 +1,54 @@
+package ch.ipt.see.playground;
+
+import org.springframework.http.HttpStatus;
+import org.springframework.http.MediaType;
+import org.springframework.http.ResponseEntity;
+import org.springframework.web.bind.annotation.PostMapping;
+import org.springframework.web.bind.annotation.RequestBody;
+import org.springframework.web.bind.annotation.RestController;
+import org.w3c.dom.Document;
+import org.w3c.dom.Element;
+import org.w3c.dom.NodeList;
+import org.xml.sax.SAXException;
+
+import javax.xml.parsers.DocumentBuilder;
+import javax.xml.parsers.DocumentBuilderFactory;
+import javax.xml.parsers.ParserConfigurationException;
+import java.io.ByteArrayInputStream;
+import java.io.IOException;
+import java.nio.charset.StandardCharsets;
+
+@RestController
+public class MathController {
+    private final DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
+
+    @PostMapping(
+            path = "/math/area_computation/hyperrectangle",
+            consumes = MediaType.APPLICATION_XML_VALUE,
+            produces = MediaType.APPLICATION_XML_VALUE
+    )
+    public ResponseEntity<String> calculateRectangleArea(@RequestBody String input) {
+        Document document;
+        try {
+            DocumentBuilder documentBuilder = factory.newDocumentBuilder();
+            document = documentBuilder.parse(new ByteArrayInputStream(input.getBytes(StandardCharsets.UTF_8)));
+        } catch (ParserConfigurationException | SAXException | IOException e) {
+            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("<error>Could not parse input</error>");
+        }
+
+        NodeList sideElements = document.getElementsByTagName("side");
+        int numberOfSides = sideElements.getLength();
+
+        if (numberOfSides < 2) {
+            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("<error>Needs at least two sides</error>");
+        }
+
+        Long area = null;
+        for (int i = 0; i < numberOfSides; i++) {
+            Element sideElement = (Element) sideElements.item(i);
+            Long length = Long.valueOf(sideElement.getAttribute("length"));
+            area = area == null ? length : area * length;
+        }
+        return ResponseEntity.ok("<calculation><area>"+area+"</area></calculation>");
+    }
+}
\ No newline at end of file
Index: src/test/java/ch/ipt/see/playground/MathControllerTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/ch/ipt/see/playground/MathControllerTest.java b/src/test/java/ch/ipt/see/playground/MathControllerTest.java
new file mode 100644
--- /dev/null	(revision d91968b1dc5eaf34c705f5aab4064aa671673715)
+++ b/src/test/java/ch/ipt/see/playground/MathControllerTest.java	(revision d91968b1dc5eaf34c705f5aab4064aa671673715)
@@ -0,0 +1,40 @@
+package ch.ipt.see.playground;
+
+import org.junit.jupiter.api.Test;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.http.MediaType;
+import org.springframework.test.web.servlet.MockMvc;
+import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
+
+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
+
+@SpringBootTest
+@AutoConfigureMockMvc
+class MathControllerTest {
+
+    @Autowired
+    private MockMvc mvc;
+
+    @Test
+    void calculateRectangleArea_twoDimensional() throws Exception {
+        mvc.perform(MockMvcRequestBuilders.post("/math/area_computation/hyperrectangle")
+                        .content("<calculation><side length=\"4\"/><side length=\"8\"/></calculation>")
+                        .contentType(MediaType.APPLICATION_XML)
+                )
+                .andExpect(status().isOk())
+                .andExpect(content().xml("<calculation><area>32</area></calculation>"));
+    }
+
+    @Test
+    void calculateRectangleArea_threeDimensional() throws Exception {
+        mvc.perform(MockMvcRequestBuilders.post("/math/area_computation/hyperrectangle")
+                        .content("<calculation><side length=\"4\"/><side length=\"8\"/><side length=\"2\"/></calculation>")
+                        .contentType(MediaType.APPLICATION_XML)
+                )
+                .andExpect(status().isOk())
+                .andExpect(content().xml("<calculation><area>64</area></calculation>"));
+    }
+}
